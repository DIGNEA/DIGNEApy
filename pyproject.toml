[build-system]
requires = ["setuptools>=70", "cmake>=3.31.0", "wheel", "ninja", "pybind11>=2.13.6", "Cython", "numpy"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["digneapy"]
ext-modules = [
    { name = "pisinger_cpp", sources = [
        "digneapy/solvers/_pisinger/src/combo.cpp",
        "digneapy/solvers/_pisinger/src/expknap.cpp",
        "digneapy/solvers/_pisinger/src/minknap.cpp",
        "digneapy/solvers/_pisinger/src/pisinger.cpp",
    ] },
    {name="digneapy.solvers._kp", sources=["digneapy/solvers/_kp.pyx"]},
    {name="digneapy.solvers._tsp_opt", sources=["digneapy/solvers/_tsp_opt.pyx"]},


]

[project]
name = "digneapy"
version = "0.2.5"
description = "Python version of the DIGNEA code for instance generation"
authors = [{ name = "Alejandro Marrero", email = "amarrerd@ull.edu.es" }]
readme = "README.md"
requires-python = ">=3.13"
license = { file = "LICENSE" }
keywords = [
    "dignea",
    "optimization",
    "instance generation",
    "quality-diversity",
    "NS",
]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    "Intended Audience :: Science/Research",
    'Intended Audience :: Developers',
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    'Topic :: Scientific/Engineering',
    'Typing :: Typed',
    'Operating System :: Unix',
    'Operating System :: MacOS',
]
dependencies = [
    "deap>=1.4",
    "fcmaes>=1.6.11",
    "keras>=3.5.0",
    "matplotlib>=3.8.4",
    "numpy>=2.2.0",
    "pandas>=2.2.2",
    "pyarrow>=21.0.0",
    "pybind11>=3.0.1",
    "scikit-learn>=1.5.0",
    "scipy>=1.13.0",
    "seaborn>=0.13.2",
    "torch>=2.8.0",
]

# [[tool.uv.index]]
# name = "pytorch"
# url = "https://download.pytorch.org/whl/cu126"

# [tool.uv.sources]
# torch = { index = "pytorch" }
# torchvision = { index = "pytorch" }

[project.urls]
homepage = "https://github.com/DIGNEA/DIGNEApy"
source = "https://github.com/DIGNEA/DIGNEApy"
issues = "https://github.com/DIGNEA/DIGNEApy/issues"

[project.optional-dependencies]
test = ["pytest>=3"]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pip>=24.0", 
    "virtualenv>=20.26.2",
    "build>=1.2.1",
    "cibuildwheel>=2.18.1",
    "ruff>=0.14.2",
    "twine>=5.1.1",
    "jinja2>=3.1.3",
    "coveralls",
    "pybind11>=3.0.1",   
    "cython",
    "coverage>=7.8.0",
]

[tool.cibuildwheel]
build = [
    "cp310-manylinux_x86_64",
    "cp311-manylinux_x86_64",
    "cp312-manylinux_x86_64",
    "cp313-manylinux_x86_64",
    #"cp314-manylinux_x86_64",
    
    "cp310-macosx_x86_64",
    "cp311-macosx_x86_64",
    "cp312-macosx_x86_64",
    "cp313-macosx_x86_64",
    #"cp314-macosx_x86_64",

]
build-frontend = "build[uv]"
before-test = "python -m pip install -r requirements.txt"
test-requires = "pytest"
test-command = "pytest --doctest-modules -W ignore::ImportWarning -W ignore::DeprecationWarning -W ignore::UserWarning {project}/tests"
build-verbosity = 1

[tool.cibuildwheel.linux]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"


[tool.pytest.init_options]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::InconsistentVersionWarning",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".csv",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
# Same as Black.
line-length = 88
indent-width = 4
# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I", "NPY201"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
